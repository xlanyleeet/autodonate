// –û—Å–Ω–æ–≤–Ω–∏–π JavaScript —Ñ–∞–π–ª –¥–ª—è —Å–∞–π—Ç—É
// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è –∑ config-frontend.js

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
if (typeof window.SITE_CONFIG === 'undefined') {
    console.error('–ü–æ–º–∏–ª–∫–∞: config-frontend.js –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∞–±–æ SITE_CONFIG –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ!');
}

const config = window.SITE_CONFIG;

// –ï–ª–µ–º–µ–Ω—Ç–∏ DOM
const navbar = document.querySelector(".navbar");
const navbarLinks = document.querySelector(".links");
const hamburger = document.querySelector(".hamburger");
const serverName = document.querySelector(".server-name");
const serverLogo = document.querySelector(".logo-img");
const serverIp = document.querySelector(".minecraft-server-ip");
const serverLogoHeader = document.querySelector(".logo-img-header");
const discordOnlineUsers = document.querySelector(".discord-online-users");
const minecraftOnlinePlayers = document.querySelector(".minecraft-online-players");
const contactForm = document.querySelector(".contact-form");

// –û–±—Ä–æ–±–Ω–∏–∫ –º–µ–Ω—é –≥–∞–º–±—É—Ä–≥–µ—Ä–∞
if (hamburger) {
    hamburger.addEventListener("click", () => {
        navbar.classList.toggle("active");
        navbarLinks.classList.toggle("active");
    });
}

// –û–±—Ä–æ–±–Ω–∏–∫ FAQ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω—É
const accordionItemHeaders = document.querySelectorAll(".accordion-item-header");
accordionItemHeaders.forEach(accordionItemHeader => {
    accordionItemHeader.addEventListener("click", () => {
        accordionItemHeader.classList.toggle("active");
        const accordionItemBody = accordionItemHeader.nextElementSibling;

        if(accordionItemHeader.classList.contains("active")) {
            accordionItemBody.style.maxHeight = accordionItemBody.scrollHeight + "px";
        } else {
            accordionItemBody.style.maxHeight = "0px";
        }
    });
});

// –§—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–Ω–ª–∞–π–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ Discord
const getDiscordOnlineUsers = async () => {
    try {
        const discordServerId = config.serverInfo.discordServerID;
        const apiWidgetUrl = `https://discord.com/api/guilds/${discordServerId}/widget.json`;
        let response = await fetch(apiWidgetUrl);
        let data = await response.json();

        if(!data.presence_count) return "–ñ–æ–¥–Ω–æ–≥–æ";
        else return (await data.presence_count);
    } catch (e) {
        return "–ñ–æ–¥–Ω–æ–≥–æ";
    }
}

// –§—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–Ω–ª–∞–π–Ω –≥—Ä–∞–≤—Ü—ñ–≤ –Ω–∞ Minecraft —Å–µ—Ä–≤–µ—Ä—ñ
const getMinecraftOnlinePlayer = async () => {
    try {
        const serverIp = config.serverInfo.serverIp;
        const apiUrl = `https://api.mcsrvstat.us/2/${serverIp}`;
        let response = await fetch(apiUrl);
        let data = await response.json();

        return data.players.online;
    } catch (e) {
        console.log(e);
        return "–ñ–æ–¥–Ω–æ–≥–æ";
    }
}

// –§—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è UUID –∑–∞ –Ω—ñ–∫–æ–º
const getUuidByUsername = async (username) => {
    try {
        const usernameToUuidApi = `https://api.minetools.eu/uuid/${username}`;
        let response = await fetch(usernameToUuidApi);
        let data = await response.json();

        return data.id;
    } catch (e) {
        console.log(e);
        return "–ñ–æ–¥–Ω–æ–≥–æ";
    }
}

// –§—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–∫—ñ–Ω–∞ –∑–∞ UUID
const getSkinByUuid = async (username) => {
    try {
        const skinByUuidApi = `https://visage.surgeplay.com/${config.userSKinTypeInAdminTeam}/512/${await getUuidByUsername(username)}`;
        let response = await fetch(skinByUuidApi);

        if(response.status === 400) {
            return `https://visage.surgeplay.com/${config.userSKinTypeInAdminTeam}/512/ec561538f3fd461daff5086b22154bce`;
        } else {
            return skinByUuidApi;
        }
    } catch (e) {
        console.log(e);
        return "–ñ–æ–¥–Ω–æ–≥–æ";
    }
}

// –§—É–Ω–∫—Ü—ñ—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è IP (–ø—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–∞ —Å–∞–π—Ç—ñ —î HTTPS)
const copyIp = () => {
    const copyIpButton = document.querySelector(".copy-ip");
    const copyIpAlert = document.querySelector(".ip-copied");

    if (!copyIpButton || !copyIpAlert) return;

    copyIpButton.addEventListener("click", () => {
        try {
            navigator.clipboard.writeText(config.serverInfo.serverIp);
    
            copyIpAlert.classList.add("active");

            setTimeout(() => {
                copyIpAlert.classList.remove("active");
            }, 5000);
        } catch (e) {
            console.log(e);
            copyIpAlert.innerHTML = "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞!";
            copyIpAlert.classList.add("active");
            copyIpAlert.classList.add("error");

            setTimeout(() => {
                copyIpAlert.classList.remove("active");
                copyIpAlert.classList.remove("error");
            }, 5000);
        }
    });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ Discord webhook
const sendToDiscord = async (formData) => {
    const webhookUrl = config.contactPage.discordWebhook;
    
    if (!webhookUrl || webhookUrl === "https://discord.com/api/webhooks/YOUR_WEBHOOK_ID/YOUR_WEBHOOK_TOKEN") {
        throw new Error("Discord webhook –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π");
    }

    const embed = {
        title: "üéÆ –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä",
        color: 0xF0C75E, // –ó–æ–ª–æ—Ç–∏–π –∫–æ–ª—ñ—Ä
        fields: [
            {
                name: "üéØ –Ü–≥—Ä–æ–≤–∏–π –Ω—ñ–∫–Ω–µ–π–º",
                value: formData.get('name') || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ",
                inline: true
            },
            {
                name: "üí¨ Discord –Ω—ñ–∫–Ω–µ–π–º",
                value: formData.get('discord-name') || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ",
                inline: true
            },
            {
                name: "üìß –ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞",
                value: formData.get('email') || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ",
                inline: true
            },
            {
                name: "üéÇ –í—ñ–∫",
                value: formData.get('age') || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ",
                inline: true
            },
            {
                name: "üìù –ü—Ä–æ —Å–µ–±–µ",
                value: formData.get('message') || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ",
                inline: false
            }
        ],
        timestamp: new Date().toISOString(),
        footer: {
            text: `–ó–∞—è–≤–∫–∞ –∑ —Å–∞–π—Ç—É ${config.serverInfo.serverName}`
        }
    };

    const payload = {
        embeds: [embed]
    };

    const response = await fetch(webhookUrl, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload)
    });

    if (!response.ok) {
        throw new Error(`–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: ${response.status}`);
    }

    return true;
};

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
const setDataFromConfigToHtml = async () => {
    // –ë–∞–∑–æ–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
    if (serverName) serverName.innerHTML = config.serverInfo.serverName;
    if (serverLogo) serverLogo.src = `images/` + config.serverInfo.serverLogoImageFileName;
    if (serverIp) serverIp.innerHTML = config.serverInfo.serverIp;

    let locationPathname = location.pathname;

    // –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
    if(locationPathname == "/" || locationPathname.includes("index")) {
        copyIp();
        if (serverLogoHeader) serverLogoHeader.src = `images/` + config.serverInfo.serverLogoImageFileName;
        if (discordOnlineUsers) discordOnlineUsers.innerHTML = await getDiscordOnlineUsers();
        if (minecraftOnlinePlayers) minecraftOnlinePlayers.innerHTML = await getMinecraftOnlinePlayer();
    } 
    // –°—Ç–æ—Ä—ñ–Ω–∫–∞ –ø—Ä–∞–≤–∏–ª
    else if(locationPathname.includes("rules")) {
        copyIp();
    }
    // –°—Ç–æ—Ä—ñ–Ω–∫–∞ –∞–¥–º—ñ–Ω –∫–æ–º–∞–Ω–¥–∏
    else if(locationPathname.includes("admin-team")) {
        for (let team in config.adminTeamPage) {
            const atContent = document.querySelector(".at-content");
            if (!atContent) continue;
            
            const group = document.createElement("div");
            group.classList.add("group");
            group.classList.add(team);

            const groupSchema = `
                <h2 class="rank-title">${team.charAt(0).toUpperCase() + team.slice(1)}</h2>
                <div class="users">
                </div>
            `;

            group.innerHTML = groupSchema;
            atContent.appendChild(group);

            for (let j = 0; j < config.adminTeamPage[team].length; j++) {
                let user = config.adminTeamPage[team][j];
                const group = document.querySelector("." + team + " .users");

                const userDiv = document.createElement("div");
                userDiv.classList.add("user");

                let userSkin = config.adminTeamPage[team][j].skinUrlOrPathToFile;

                if(userSkin == "") userSkin = await getSkinByUuid(user.inGameName);
                let rankColor = config.atGroupsDefaultColors[team];

                if(user.rankColor != "") {
                    rankColor = user.rankColor;
                }

                const userDivSchema = `
                    <img src="${await (userSkin)}" alt="${user.inGameName}">
                    <h5 class="name">${user.inGameName}</h5>
                    <p class="rank ${team}" style="background: ${rankColor}">${user.rank}</p>  
                `;

                userDiv.innerHTML = userDivSchema;
                group.appendChild(userDiv);
            }
        }
    } 
    // –°—Ç–æ—Ä—ñ–Ω–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤
    else if(locationPathname.includes("contact")) {
        if (discordOnlineUsers) discordOnlineUsers.innerHTML = await getDiscordOnlineUsers();
        
        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Ñ–æ—Ä–º–∏
        if (contactForm) {
            contactForm.addEventListener('submit', async (event) => {
                event.preventDefault();
                
                const submitButton = contactForm.querySelector('button[type="submit"]');
                const originalButtonText = submitButton.innerHTML;
                
                try {
                    // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                    submitButton.innerHTML = '–í—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç—å—Å—è... <i class="fa-solid fa-spinner fa-spin"></i>';
                    submitButton.disabled = true;
                    
                    const formData = new FormData(contactForm);
                    await sendToDiscord(formData);
                    
                    // –£—Å–ø—ñ—Ö
                    submitButton.innerHTML = '–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ! <i class="fa-solid fa-check"></i>';
                    submitButton.style.backgroundColor = '#4CAF50';
                    
                    // –û—á–∏—â–∞—î–º–æ —Ñ–æ—Ä–º—É
                    contactForm.reset();
                    
                    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏
                    setTimeout(() => {
                        submitButton.innerHTML = originalButtonText;
                        submitButton.disabled = false;
                        submitButton.style.backgroundColor = '';
                    }, 3000);
                    
                } catch (error) {
                    console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:', error);
                    
                    // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫—É
                    submitButton.innerHTML = '–ü–æ–º–∏–ª–∫–∞! <i class="fa-solid fa-exclamation-triangle"></i>';
                    submitButton.style.backgroundColor = '#f44336';
                    
                    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏
                    setTimeout(() => {
                        submitButton.innerHTML = originalButtonText;
                        submitButton.disabled = false;
                        submitButton.style.backgroundColor = '';
                    }, 3000);
                }
            });
        }
    }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é
setDataFromConfigToHtml();
