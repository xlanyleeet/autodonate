const rcon = require('rcon');

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
let config;
try {
    config = require('./config.js');
} catch (error) {
    console.error('‚ùå –§–∞–π–ª config.js –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –°–∫–æ–ø—ñ—é–π—Ç–µ config.example.js —è–∫ config.js');
    process.exit(1);
}

console.log('üîß –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è RCON –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...');
console.log(`üì° –°–µ—Ä–≤–µ—Ä: ${config.minecraft.host}:${config.minecraft.port}`);

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è RCON
function testRcon() {
    return new Promise((resolve, reject) => {
        const conn = new rcon(config.minecraft.host, config.minecraft.port, config.minecraft.password);
        
        conn.on('auth', () => {
            console.log('‚úÖ RCON –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞');
            conn.send('list');
        });
        
        conn.on('response', (str) => {
            console.log('üìã –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞:', str);
            conn.disconnect();
            resolve(str);
        });
        
        conn.on('error', (err) => {
            console.error('‚ùå RCON –ø–æ–º–∏–ª–∫–∞:', err.message);
            conn.disconnect();
            reject(err);
        });
        
        conn.on('end', () => {
            console.log('üîå RCON –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ');
        });
        
        console.log('üîÑ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ RCON...');
        conn.connect();
    });
}

// –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥
async function testCommands() {
    const testCommands = [
        'list',
        'version',
        'tps'
    ];
    
    for (const command of testCommands) {
        try {
            console.log(`\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏: ${command}`);
            
            const result = await new Promise((resolve, reject) => {
                const conn = new rcon(config.minecraft.host, config.minecraft.port, config.minecraft.password);
                
                conn.on('auth', () => {
                    conn.send(command);
                });
                
                conn.on('response', (str) => {
                    conn.disconnect();
                    resolve(str);
                });
                
                conn.on('error', (err) => {
                    conn.disconnect();
                    reject(err);
                });
                
                conn.connect();
            });
            
            console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result}`);
        } catch (error) {
            console.error(`‚ùå –ö–æ–º–∞–Ω–¥–∞ "${command}" –Ω–µ –≤–¥–∞–ª–∞—Å—å:`, error.message);
        }
    }
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async function main() {
    try {
        console.log('üöÄ –ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è RCON...\n');
        
        // –ë–∞–∑–æ–≤–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        await testRcon();
        
        console.log('\nüîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥...');
        await testCommands();
        
        console.log('\nüéâ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
        console.log('‚úÖ RCON –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
        console.log('üöÄ –ú–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç–∏ –∞–≤—Ç–æ–¥–æ–Ω–∞—Ç –∫–æ–º–∞–Ω–¥–æ—é: npm start');
        
    } catch (error) {
        console.error('\nüí• –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—å');
        console.error('–ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:');
        console.error('1. Minecraft —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π');
        console.error('2. RCON –Ω–µ —É–≤—ñ–º–∫–Ω–µ–Ω—Ç–æ –≤ server.properties');
        console.error('3. –ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å RCON');
        console.error('4. –ù–µ–≤—ñ—Ä–Ω–∏–π IP –∞–±–æ –ø–æ—Ä—Ç');
        console.error('\n–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤ config.js');
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
main();
